#!/bin/bash

# paths
export PYTHONPATH=/home/pbschoon/3rd-party/lib/python2.6/site-packages:/home/pbschoon/3rd-party/lib64/python2.6/site-packages
export LD_LIBRARY_PATH=/home/pbschoon/3rd-party/lib

# amount of time to schedule the DAS4 ("MM:SS" or "HH:MM:SS")
# the scenario should end before this time is over
RUNTIME="25:0"
# number of DAS4 nodes to claim
HOSTS=10

# number of processes to run (these will be divided among HOSTS nodes)
TASKS=500

# will start BATCHSIZE processes every BATCHDELAY seconds
BATCHSIZE=10
BATCHDELAY=1

# local script to execute (runs once on each host)
SCRIPT="node.sh"

# SCRIPT starts: BINARY BINARYPARAMS peer.py DISPERSYPARAMS --kargs DISPERSYKARGS,startstamp=N,scenario=config
BINARY="python"
BINARYPARAMS="-O"
DISPERSYPARAMS="--script dissemination.script.ScenarioScript"
DISPERSYKARGS=""

# destination directory where results are copied to
RESULTDIR="/var/scratch/$USER/resultdir-dissemination-random"
RSYNCPARAMS="--exclude=sqlite --exclude=dprint.conf --exclude=bootstraptribler.txt"

# directory that is copied to each DAS4 node (must contain peer.py)
PYTHONCODEDIR="`pwd`"

# optional files
DPRINTFILE="`pwd`/logger.conf"
#BOOTSTRAPFILE="`pwd`/bootstraptribler.txt"

# the scenario script
: <<SCENARIO_AREA
# See dispersy/tool/scenarioscript.py for scenario format

# start and end the scenario after ... minutes
@0:0 start databases/dispersy-3000text-1peer.db all_to_all
@15:0 end

# data creation group
#@0:0 create_one CREATE ONE {0}
#@0:0 create_start 1 CREATE PERIODICALLY {200-299}
#@5:0 create_stop {200-299}
#@0:0 churn online {200-299}

# test groups
@0:0 set_karg enable_sync_cache False
@0:0 set_karg enable_sync_skip False
@0:0 set_karg sync_response_limit 5120
@0:0 churn online

SCENARIO_AREA
